//
//  {{ module_name }}Presenter
//  {{ project_name }}
//
//  Created by {{ developer_name }} on {{ date }}.
//

import CollectionComposer
import Combine
import Foundation

enum {{ module_name }}PresenterState {
    // TODO: Add any states for view
    case initial
}

@MainActor
protocol {{ module_name }}PresenterInput {
    // MARK: View Life-Cycle methods

    func viewDidLoad()

    // MARK: Other methods called from View
}

@MainActor
final class {{ module_name }}Presenter {
    // MARK: VIPER properties
    weak var view: (any {{ module_name }}ViewInput)!
    var interactor: (any {{ module_name }}InteractorInput)!
    var router: (any {{ module_name }}RouterInput)!

    @Published private var state: {{ module_name }}PresenterState = .initial
    private var cancellable = Set<AnyCancellable>()

    init(view: {{ module_name }}ViewInput, interactor: any {{ module_name }}InteractorInput, router: {{ module_name }}RouterInput) {
        self.view = view
        self.interactor = interactor
        self.router = router
    }
}

extension {{ module_name }}Presenter: {{ module_name }}PresenterInput {
    func viewDidLoad() {
        // Do any additional setup after loading the view.
        view.updateSections(for: state)
        $state
            .sink { [weak self] newState in
                guard let self else {
                    return
                }
                view.updateSections(for: newState)
            }.store(in: &cancellable)
    }
}

extension {{ module_name }}Presenter: {{ module_name }}InteractorOutput {}

//
//  {{ module_name }}Presenter
//  {{ project_name }}
//
//  Created by {{ developer_name }} on {{ date }}.
//

import CollectionComposer
import CollectionComposerVIPERExtension
import Foundation

enum {{ module_name }}PresenterState {
    // TODO: Add any states for view
}

@MainActor
{% if has_repository %}
protocol {{ module_name }}PresenterInput: ComposedViewFetchablePresenterInput {
{% else %}
protocol {{ module_name }}PresenterInput {
{% endif %}
    // MARK: View Life-Cycle methods

    func viewDidLoad()

    // MARK: Other methods called from View
}

final class {{ module_name }}Presenter {
    // MARK: VIPER properties
    weak var view: (any {{ module_name }}ViewInput)!
    var interactor: (any {{ module_name }}InteractorInput)!
    var router: (any {{ module_name }}RouterInput)!

{% if has_repository %}
    @Published var isLoading = false
{% endif %}

    init(view: {{ module_name }}ViewInput, interactor: any {{ module_name }}InteractorInput, router: {{ module_name }}RouterInput) {
        self.view = view
        self.interactor = interactor
        self.router = router
    }
}

extension {{ module_name }}Presenter: {{ module_name }}PresenterInput {
{% if has_repository %}
    var isLoadingPublisher: Published<Bool>.Publisher {
        return $isLoading
    }

{% endif %}
    func viewDidLoad() {
        // Do any additional setup after loading the view.
        view.updateSections(for: makeState())
{% if has_repository %}
        fetch(force: true)
{% endif %}
    }

    private func makeState() -> {{ module_name }}PresenterState {
        // TODO: Construct context from the entity
    }
{% if has_repository %}

    func fetch(force: Bool) {
        Task { [weak view] in
            isLoading = true
            do {
                try await interactor.fetch(force: force)
            }
            catch {
                // TODO: handle error
            }
            view?.updateSections(for: makeState())
            isLoading = false
        }
    }
{% endif %}
}

extension {{ module_name }}Presenter: {{ module_name }}InteractorOutput {}
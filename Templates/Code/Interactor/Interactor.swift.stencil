//
//  {{ module_name }}Interactor
//  {{ project_name }}
//
//  Created by {{ developer_name }} on {{ date }}.
//

import CollectionComposer
import CollectionComposerVIPERExtension
import Foundation

{% if has_repository %}
protocol {{ module_name }}InteractorInput: ComposedViewFetchableInteractorInput {
{% else %}
protocol {{ module_name }}InteractorInput {
{% endif %}
    // MARK: Methods called from presenter
}

protocol {{ module_name }}InteractorOutput: ComposedViewInteractorOutput {
    // MARK: Callback methods for presenter
}

{% if has_repository %}
final class {{ module_name }}Interactor<Repository: {{ module_name }}RepositoryInterface> {
    var repository: Repository
{% else %}
final class {{ module_name }}Interactor {
{% endif %}

    // MARK: VIPER property
    weak var presenter: (any {{ module_name }}InteractorOutput)!

{% if has_repository %}
    init(repository: Repository) {
        self.repository = repository
    }
{% else %}
    init() {}
{% endif %}

    // MARK: Other private methods
}

extension {{ module_name }}Interactor: {{ module_name }}InteractorInput {
{% if has_repository %}
    func fetch(force: Bool) async throws {
        let result = try await repository.fetch(force: force)
        await presenter.updateSections()
    }
{% endif %}
}